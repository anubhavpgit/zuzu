[{"title":"CheatSheet- MD","author":"Anubhab Patnaik","date":"May 29, 2022","link":"https://anubhavp.dev/zuzu/cheatsheet.html","content":"<h1 id=\"navigation\" tabindex=\"-1\">Navigation</h1>\n<blockquote>\n<p>Tech stuf</p>\n</blockquote>\n<ol>\n<li>First item</li>\n<li>Second item</li>\n<li>Third item</li>\n<li>Fourth item</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Navigation</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tech</td>\n<td>Tech stuff that I have written</td>\n</tr>\n<tr>\n<td>Paragraph</td>\n<td>Text</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"language-js\">  <span class=\"hljs-string\">&quot;firstName&quot;</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,\n  <span class=\"hljs-string\">&quot;lastName&quot;</span>: <span class=\"hljs-string\">&quot;Smith&quot;</span>,\n  <span class=\"hljs-string\">&quot;age&quot;</span>: <span class=\"hljs-number\">25</span>\n</code></pre>\n<hr>\n<h1 id=\"h1-heading-8-\" tabindex=\"-1\">h1 Heading 8-)</h1>\n<h2 id=\"h2-heading\" tabindex=\"-1\">h2 Heading</h2>\n<h3 id=\"h3-heading\" tabindex=\"-1\">h3 Heading</h3>\n<h4 id=\"h4-heading\" tabindex=\"-1\">h4 Heading</h4>\n<h5 id=\"h5-heading\" tabindex=\"-1\">h5 Heading</h5>\n<h6 id=\"h6-heading\" tabindex=\"-1\">h6 Heading</h6>\n<h2 id=\"horizontal-rules\" tabindex=\"-1\">Horizontal Rules</h2>\n<hr>\n<hr>\n<hr>\n<h2 id=\"typographic-replacements\" tabindex=\"-1\">Typographic replacements</h2>\n<p>Enable typographer option to see result.</p>\n<p>© © ® ® ™ ™ (p) (P) ±</p>\n<p>test… test… test… test?.. test!..</p>\n<p>!!! ??? ,  – —</p>\n<p>“Smartypants, double quotes” and ‘single quotes’</p>\n<h2 id=\"emphasis\" tabindex=\"-1\">Emphasis</h2>\n<p><strong>This is bold text</strong></p>\n<p><strong>This is bold text</strong></p>\n<p><em>This is italic text</em></p>\n<p><em>This is italic text</em></p>\n<p><s>Strikethrough</s></p>\n<h2 id=\"blockquotes\" tabindex=\"-1\">Blockquotes</h2>\n<blockquote>\n<p>Blockquotes can also be nested…</p>\n<blockquote>\n<p>…by using additional greater-than signs right next to each other…</p>\n<blockquote>\n<p>…or with spaces between arrows.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"lists\" tabindex=\"-1\">Lists</h2>\n<p>Unordered</p>\n<ul>\n<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>\n<li>Sub-lists are made by indenting 2 spaces:\n<ul>\n<li>Marker character change forces new list start:\n<ul>\n<li>Ac tristique libero volutpat at</li>\n</ul>\n<ul>\n<li>Facilisis in pretium nisl aliquet</li>\n</ul>\n<ul>\n<li>Nulla volutpat aliquam velit</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Very easy!</li>\n</ul>\n<p>Ordered</p>\n<ol>\n<li>\n<p>Lorem ipsum dolor sit amet</p>\n</li>\n<li>\n<p>Consectetur adipiscing elit</p>\n</li>\n<li>\n<p>Integer molestie lorem at massa</p>\n</li>\n<li>\n<p>You can use sequential numbers…</p>\n</li>\n<li>\n<p>…or keep all the numbers as <code>1.</code></p>\n</li>\n</ol>\n<p>Start numbering with offset:</p>\n<ol start=\"57\">\n<li>foo</li>\n<li>bar</li>\n</ol>\n<h2 id=\"code\" tabindex=\"-1\">Code</h2>\n<p>Inline <code>code</code></p>\n<p>Indented code</p>\n<pre><code>// Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n</code></pre>\n<p>Block code “fences”</p>\n<pre><code>Sample text here...\n</code></pre>\n<p>Syntax highlighting</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">bar</span>) {\n  <span class=\"hljs-keyword\">return</span> bar++;\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-number\">5</span>));\n</code></pre>\n<h2 id=\"tables\" tabindex=\"-1\">Tables</h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>data</td>\n<td>path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td>engine</td>\n<td>engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td>ext</td>\n<td>extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<p>Right aligned columns</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Option</th>\n<th style=\"text-align:right\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">data</td>\n<td style=\"text-align:right\">path to data files to supply the data that will be passed into templates.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">engine</td>\n<td style=\"text-align:right\">engine to be used for processing templates. Handlebars is the default.</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ext</td>\n<td style=\"text-align:right\">extension to be used for dest files.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"links\" tabindex=\"-1\">Links</h2>\n<p><a href=\"http://dev.nodeca.com\">link text</a></p>\n<p><a href=\"http://nodeca.github.io/pica/demo/\" title=\"title text!\">link with title</a></p>\n<p>Autoconverted link <a href=\"https://github.com/nodeca/pica\">https://github.com/nodeca/pica</a> (enable linkify to see)</p>\n<h2 id=\"images\" tabindex=\"-1\">Images</h2>\n<p><img src=\"https://octodex.github.com/images/minion.png\" alt=\"Minion\">\n<img src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" title=\"The Stormtroopocat\"></p>\n<p>Like links, Images also have a footnote style syntax</p>\n<p><img src=\"https://octodex.github.com/images/dojocat.jpg\" alt=\"Alt text\" title=\"The Dojocat\"></p>\n<p>With a reference later in the document defining the URL location:</p>\n<h2 id=\"plugins\" tabindex=\"-1\">Plugins</h2>\n<p>The killer feature of <code>markdown-it</code> is very effective support of\n<a href=\"https://www.npmjs.org/browse/keyword/markdown-it-plugin\">syntax plugins</a>.</p>\n<h3 id=\"emojies\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-emoji\">Emojies</a></h3>\n<blockquote>\n<p>Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:</p>\n<p>Shortcuts (emoticons): :-) :-( 8-) ;)</p>\n</blockquote>\n<p>see <a href=\"https://github.com/markdown-it/markdown-it-emoji#change-output\">how to change output</a> with twemoji.</p>\n<h3 id=\"subscript-superscript\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-sub\">Subscript</a> / <a href=\"https://github.com/markdown-it/markdown-it-sup\">Superscript</a></h3>\n<ul>\n<li>19^th^</li>\n<li>H~2~O</li>\n</ul>\n<h3 id=\"ins\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-ins\">&lt;ins&gt;</a></h3>\n<p>++Inserted text++</p>\n<h3 id=\"mark\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-mark\">&lt;mark&gt;</a></h3>\n<p>==Marked text==</p>\n<h3 id=\"footnotes\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-footnote\">Footnotes</a></h3>\n<p>Footnote 1 link[^first].</p>\n<p>Footnote 2 link[^second].</p>\n<p>Inline footnote^[Text of inline footnote] definition.</p>\n<p>Duplicated footnote reference[^second].</p>\n<p>[^first]: Footnote <strong>can have markup</strong></p>\n<pre><code>and multiple paragraphs.\n</code></pre>\n<p>[^second]: Footnote text.</p>\n<h3 id=\"definition-lists\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-deflist\">Definition lists</a></h3>\n<p>Term 1</p>\n<p>:   Definition 1\nwith lazy continuation.</p>\n<p>Term 2 with <em>inline markup</em></p>\n<p>:   Definition 2</p>\n<pre><code>    { some code, part of Definition 2 }\n\nThird paragraph of definition 2.\n</code></pre>\n<p><em>Compact style:</em></p>\n<p>Term 1\n~ Definition 1</p>\n<p>Term 2\n~ Definition 2a\n~ Definition 2b</p>\n<h3 id=\"abbreviations\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-abbr\">Abbreviations</a></h3>\n<p>This is HTML abbreviation example.</p>\n<p>It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on.</p>\n<p>*[HTML]: Hyper Text Markup Language</p>\n<h3 id=\"custom-containers\" tabindex=\"-1\"><a href=\"https://github.com/markdown-it/markdown-it-container\">Custom containers</a></h3>\n<p>::: warning\n<em>here be dragons</em>\n:::</p>\n"},{"title":"zuzu: A Static Site Generator (SSG)","author":"Anubhab Patnaik","date":"May 29, 2022","link":"https://anubhavp.dev/zuzu/zuzu.html","content":"<p>Zuzu is a static site generator that takes in markdown files and render htmls pages. <a href=\"https://anubhavp.dev/blog\">This blog</a>, for example, has been written using this generator. This enables noobs like me to write blogs without having to learn a lot of code! It is a very simple and easy to use generator. All you need to do is to write a markdown file and it will be rendered as a page ;) You can create a new page by creating a new markdown file.</p>\n<ul>\n<li><a href=\"#how-does-it-work\">How Does it work</a>\n<ul>\n<li><a href=\"#1-create-a-markdown-file\">Create a markdown file.</a></li>\n<li><a href=\"#2-run-the-generator-and-find-your-blog\">Run the generator and find your blog.</a></li>\n</ul>\n</li>\n<li><a href=\"#the-static-site-generator\">The Static Site Generator</a>\n<ul>\n<li><a href=\"#1-libraries-used\">Libraries Used</a></li>\n<li><a href=\"#2-workflow\">Workflow</a></li>\n<li><a href=\"#3-generator-code\">Generator Code.</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"how-does-it-work\" tabindex=\"-1\">How does it work?</h2>\n<p>Zuzu parses the markdown file using <em>javascript</em> and renders it as <em>html documents</em>. It then saves the html files in the <code>public</code> folder. The public folder, with <code>index.html</code> file, is the final output of the generator and this can be deployed and hosted in various platforms. This particular blog has been deployed on <a href=\"https://anubhavp.dev/blog/\">Github Pages</a>.</p>\n<h3 id=\"1-create-a-markdown-file\" tabindex=\"-1\">1. Create a markdown file</h3>\n<pre><code># This is a title\nThis is a paragraph\nThis is another paragraph\nThis is a list:\n* Item 1\n* Item 2\n* Item 3\nThis is a code block:\n```\nprint(&quot;Hello World&quot;)\n```\nThis is a table:\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| 1        | 2        | 3        |\n| 4        | 5        | 6        |\n| 7        | 8        | 9        |\nThis is a link: [zuzu](https://anubhavp.dev/blog/zuzu.html)\n</code></pre>\n<h3 id=\"2-run-the-generator-and-find-your-blog\" tabindex=\"-1\">2. Run the generator and find your blog</h3>\n<p>Run <code>npm run generate</code> in the console.\nYou’ll now see the blog in the public folder! Run the index.html file in your browser to see your blog. You may now deploy your site\nto a server.</p>\n<h2 id=\"the-static-site-generator\" tabindex=\"-1\">The Static Site Generator</h2>\n<h3 id=\"1-libraries-used\" tabindex=\"-1\">1. Libraries used</h3>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/markdown-it\">MarkdownIt</a> <em>Markdown parser done right.</em></li>\n<li><a href=\"https://www.npmjs.com/package/markdown-it-anchor\">MarkdownItAnchor</a> <em>Header anchors for markdown-it.</em></li>\n<li><a href=\"https://www.npmjs.com/package/glob\">Glob</a> <em>“Globs” are the patterns you type when you do stuff like ls .js on the command line, or put build/ in a .gitignore file.</em></li>\n<li><a href=\"https://www.npmjs.com/package/gray-matter\">Gray-Matter</a> <em>Parse front-matter from a string or file.</em></li>\n<li><a href=\"https://npmjs.com/package/mkdirp\">Mkdirp</a> <em>Create Dirs if they do not exist.</em></li>\n</ul>\n<h3 id=\"2-workflow\" tabindex=\"-1\">2. Workflow</h3>\n<p>This is the code for the generator.js.\nThe code works in the following way:</p>\n<ol>\n<li><code>fs.readfile() from fs</code> reads all the files from the said directory and stores then in <code>filename</code> using <code>glob</code>. It is a <code>glob</code> that matches all the files in the directory. The <code>file system</code> module allows you to work with the file system on your computer.</li>\n<li><code>gray-matter</code> helps extracting front matter from the a string or file.\nConverts a string with front-matter, like this:</li>\n</ol>\n<pre><code>    title: Hello\n    slug: home\n    ---\n    &lt;h1&gt;Hello world!&lt;/h1&gt;\n</code></pre>\n<p>Into an object like this:</p>\n<pre><code>{\ncontent: '&lt;h1&gt;Hello world!&lt;/h1&gt;',\ndata: { \n    title: 'Hello', \n    slug: 'home' \n}\n}\n</code></pre>\n<p>It then extracts the front matter and stores it in <code>data</code>. It then stores the content in <code>content</code> and returns the <code>filename</code> to the <code>main()</code> function. It then repeats the process for all the files in the directory.</p>\n<ol start=\"3\">\n<li>\n<p>The <code>main()</code> function then takes in one <code>filename</code> at a time and then parses it through <code>markdownit( ,{markdownitanchor})</code>. <code>markdownit</code> parses the file and converts the markdown content into HTML files. It then creates a <code>html</code> file and writes the parsed content into it. It then saves the <code>html</code> file in the <code>public</code> folder. This process repeats for all the files in the directory.</p>\n</li>\n<li>\n<p>The converted html files are stored in the specified directories then using <code>mkdirp</code>. The <code>index.html</code> file isalready present in the <code>public</code> folder. <code>mkdirp</code> creates the directories if they do not exist.</p>\n</li>\n</ol>\n<h3 id=\"3-generator-code\" tabindex=\"-1\">3. Generator Code</h3>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs&#x27;</span>\n<span class=\"hljs-keyword\">import</span> glob <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;glob&#x27;</span>\n<span class=\"hljs-keyword\">import</span> matter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;gray-matter&#x27;</span>\n<span class=\"hljs-keyword\">import</span> mkdirp <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;mkdirp&#x27;</span>\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;path&#x27;</span>\n<span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highlight.js&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">MarkdownIt</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;markdown-it&#x27;</span>\n<span class=\"hljs-keyword\">import</span> markdownItAnchor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;markdown-it-anchor&#x27;</span>\n<span class=\"hljs-keyword\">import</span> string <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;string&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">slugify</span> = s =&gt; <span class=\"hljs-title function_\">string</span>(s).<span class=\"hljs-title function_\">slugify</span>().<span class=\"hljs-title function_\">toString</span>()\n\n\n<span class=\"hljs-keyword\">const</span> md = <span class=\"hljs-title class_\">MarkdownIt</span>({\n    <span class=\"hljs-attr\">html</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">linkify</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">typographer</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-title function_\">highlight</span>(<span class=\"hljs-params\">str, language</span>) {\n        <span class=\"hljs-keyword\">if</span> (language &amp;&amp; hljs.<span class=\"hljs-title function_\">getLanguage</span>(language)) {\n            <span class=\"hljs-keyword\">try</span> {\n\n                <span class=\"hljs-keyword\">return</span> hljs.<span class=\"hljs-title function_\">highlight</span>(str, { <span class=\"hljs-attr\">language</span>: language }).<span class=\"hljs-property\">value</span>;\n            } <span class=\"hljs-keyword\">catch</span> (err) {\n                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err)\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n}).<span class=\"hljs-title function_\">use</span>(markdownItAnchor, { slugify });\n\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">readFile</span> = (<span class=\"hljs-params\">filename</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> rawFile = fs.<span class=\"hljs-title function_\">readFileSync</span>(filename, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> parsed = <span class=\"hljs-title function_\">matter</span>(rawFile)\n    <span class=\"hljs-keyword\">const</span> html = md.<span class=\"hljs-title function_\">render</span>(parsed.<span class=\"hljs-property\">content</span>)\n\n    <span class=\"hljs-keyword\">return</span> {...parsed, html }\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">templatize</span> = (<span class=\"hljs-params\">template, { date, title, content, author }</span>) =&gt;\n    template\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- PUBLISH_DATE --&gt;/g</span>, date)\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- TITLE --&gt;/g</span>, title)\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- CONTENT --&gt;/g</span>, content)\n    .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/&lt;!-- AUTHOR --&gt;/g</span>, author)\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">saveFile</span> = (<span class=\"hljs-params\">filename, contents</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> dir = path.<span class=\"hljs-title function_\">dirname</span>(filename)\n    mkdirp.<span class=\"hljs-title function_\">sync</span>(dir)\n    fs.<span class=\"hljs-title function_\">writeFileSync</span>(filename, contents)\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getOutputFilename</span> = (<span class=\"hljs-params\">filename, outPath</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> basename = path.<span class=\"hljs-title function_\">basename</span>(filename)\n    <span class=\"hljs-keyword\">const</span> newfilename = basename.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>, basename.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">3</span>) + <span class=\"hljs-string\">&#x27;.html&#x27;</span>\n    <span class=\"hljs-keyword\">const</span> outfile = path.<span class=\"hljs-title function_\">join</span>(outPath, newfilename)\n    <span class=\"hljs-keyword\">return</span> outfile\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">processFile</span> = (<span class=\"hljs-params\">filename, template, outPath</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> file = <span class=\"hljs-title function_\">readFile</span>(filename)\n    <span class=\"hljs-keyword\">const</span> outfilename = <span class=\"hljs-title function_\">getOutputFilename</span>(filename, outPath)\n\n    <span class=\"hljs-keyword\">const</span> templatized = <span class=\"hljs-title function_\">templatize</span>(template, {\n        <span class=\"hljs-attr\">date</span>: file.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">date</span>,\n        <span class=\"hljs-attr\">title</span>: file.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">title</span>,\n        <span class=\"hljs-attr\">content</span>: file.<span class=\"hljs-property\">html</span>,\n        <span class=\"hljs-attr\">author</span>: file.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">author</span>,\n    })\n\n    <span class=\"hljs-title function_\">saveFile</span>(outfilename, templatized)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`📝 <span class=\"hljs-subst\">${outfilename}</span>`</span>)\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> srcPath = path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;content&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> outPath = path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&#x27;public&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> template = fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">&#x27;./templates/initial/template.html&#x27;</span>, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>)\n    <span class=\"hljs-keyword\">const</span> filenames = glob.<span class=\"hljs-title function_\">sync</span>(srcPath + <span class=\"hljs-string\">&#x27;/**/*.md&#x27;</span>)\n\n    filenames.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">filename</span>) =&gt;</span> {\n        <span class=\"hljs-title function_\">processFile</span>(filename, template, outPath)\n    })\n}\n\n<span class=\"hljs-title function_\">main</span>()\n\n</code></pre>\n"}]